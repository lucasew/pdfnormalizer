#!/usr/bin/env nix-shell
#! nix-shell -i python -p python3Packages.pdf2image python3Packages.pysimplegui python3Packages.opencv4 python3Packages.screeninfo python3Packages.tensorflow python3Packages.keras python3Packages.matplotlib python3Packages.pytesseract python3Packages.tqdm
# vim:ft=python

from argparse import ArgumentParser
from pdf2image import convert_from_path
from pathlib import Path
from io import BytesIO
import PySimpleGUI as sg
import numpy as np
import cv2
import random
from screeninfo import get_monitors, Enumerator
from pdfnormalizer.utils import array_to_data, GUI, GUIHandler, log
from pdfnormalizer.model import Element, prepare_page_for_subdivision, get_bounding_boxes, SubdivisionAction, trim_whitespace
import tensorflow as tf
from PIL import Image
from base64 import b64encode
from tqdm import tqdm

from matplotlib import pyplot as plt

from pytesseract import image_to_string

parser = ArgumentParser()
parser.add_argument('-i', type=Path, help="PDF file to process", required=True)
parser.add_argument('-z', type=float, help="zoom scale", default=1)
parser.add_argument('-n', type=int, help="start at page", default=1)
parser.add_argument('-m', type=Path, help="model file (h5)", required=True)

args = parser.parse_args()

scale = args.z

images = convert_from_path(args.i)
qt_images = len(images)

model = tf.keras.models.load_model(args.m)

def predict_page(img):
    w, h, *rest = img.shape
    img = img.copy()
    prepared = prepare_page_for_subdivision(img)
    queue = []
    visited = {}
    queue.append((*trim_whitespace(prepared), 1))
    while len(queue) > 0:
        (x, y, sx, sy, depth) = queue.pop()
        # log(x, y, sx, sy, depth)
        if depth > 20:
            continue
        cls = model.predict(np.array([[
            depth/20,
            x / w,
            y / h,
            sx / w,
            sy / h
        ]]))
        prediction = SubdivisionAction(int(tf.argmax(cls.T)[0])+1)
        if (x, y, sx, sy) in visited:
            continue
        if prediction == SubdivisionAction.HORIZONTAL:
            bbx = get_bounding_boxes(
                prepared,
                depth=depth,
                horizontal=True,
                sx=sx,
                sy=sy,
                x=x,
                y=y,
                max_depth=depth+1
            )
            for it in bbx:
                queue.append([
                    int(it.x*w),
                    int(it.y*h),
                    int(it.sx*w),
                    int(it.sy*h),
                    depth+1
                ])
        if prediction == SubdivisionAction.VERTICAL:
            bbx = get_bounding_boxes(
                prepared,
                depth=depth,
                horizontal=False,
                sx=sx,
                sy=sy,
                x=x,
                y=y,
                max_depth=depth+1
            )
            for it in bbx:
                queue.append([
                    int(it.x*w),
                    int(it.y*h),
                    int(it.sx*w),
                    int(it.sy*h),
                    depth+1
                ])
        if prediction == SubdivisionAction.END_TEXT:
            yield ('text', x, sx, y, sy, depth)
        if prediction == SubdivisionAction.END_FIGURE:
            yield ('figure', x, sx, y, sy, depth)
        if prediction == SubdivisionAction.END_THRASH:
            pass # ignore, as it is trash
        if prediction not in [SubdivisionAction.VERTICAL, SubdivisionAction.HORIZONTAL]:
            visited[x, y, sx, sy] = True

print('''
<!DOCTYPE html>
<html>
<head>
    <style>
    body {
        max-width: 100vw;
    }
    body > * {
        max-width: 100%;
    }
    </style>
    <meta charset="UTF-8"/>
</head>
<body>
''')
for (i, image) in enumerate(tqdm(images)):
    image = np.array(image)
    # log(image)
    print(f"<!-- Página {i} -->")
    for (kind, x, sx, y, sy, depth) in predict_page(image):
        log("prediction", kind, x, sx, y, sy, depth)
        if kind == "text":
            text = image_to_string(image[x:x+sx, y:y+sy])
            print("<!-- Início do bloco de texto -->")
            for line in text.split("\n"):
                print(f"<p>{line}</p>")
        elif kind == "figure":
            roi = image[x:x+sx, y:y+sy]
            b64 = b64encode(array_to_data(roi))
            print(f"<img src=data:image/png;base64,{b64.decode('ascii')}>")

print("</body></html>")
