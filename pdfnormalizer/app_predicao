#!/usr/bin/env nix-shell
#! nix-shell -i python -p python3Packages.pdf2image python3Packages.pysimplegui python3Packages.opencv4 python3Packages.screeninfo python3Packages.tensorflow python3Packages.keras python3Packages.matplotlib
# vim:ft=python

from argparse import ArgumentParser
from pdf2image import convert_from_path
from pathlib import Path
import PySimpleGUI as sg
import numpy as np
import cv2
import random
from screeninfo import get_monitors, Enumerator
from pdfnormalizer.utils import array_to_data, GUI, GUIHandler
from pdfnormalizer.model import Element, prepare_page_for_subdivision, get_bounding_boxes, SubdivisionAction, trim_whitespace
import tensorflow as tf

from matplotlib import pyplot as plt


class CustomGUIHandler(GUIHandler):
    current_element = None

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.model = tf.keras.models.load_model(kwargs['model'])

    def handle_page_change(self, gui):
        gui.emit('tick')

    def handle_prev(self, gui, value):
        super().handle_prev(gui, value)
        self.handle_page_change(gui)

    def handle_next(self, gui, value):
        super().handle_next(gui, value)
        self.handle_page_change(gui)

    def frame_transform(self, img):
        print(np.min(img), np.max(img))
        w, h, *rest = img.shape
        img = img.copy()
        ret = img.copy()
        ret[:, :, :] = 0
        prepared = prepare_page_for_subdivision(img)
        queue = []
        visited = {}
        self.current_element = None
        queue.append((*trim_whitespace(prepared), 1))
        while len(queue) > 0:
            print("loop")
            (x, y, sx, sy, depth) = queue.pop()
            print(x, y, sx, sy, depth)
            if depth > 20:
                continue
            cls = self.model.predict(np.array([[
                depth/20,
                x / w,
                y / h,
                sx / w,
                sy / h
            ]]))
            prediction = SubdivisionAction(int(tf.argmax(cls.T)[0])+1)
            print("prediction", prediction)
            if (x, y, sx, sy) in visited:
                continue
            if prediction == SubdivisionAction.HORIZONTAL:
                bbx = get_bounding_boxes(
                    prepared,
                    depth=depth,
                    horizontal=True,
                    sx=sx,
                    sy=sy,
                    x=x,
                    y=y,
                    max_depth=depth+1
                )
                print(bbx)
                for it in bbx:
                    print(it)
                    queue.append([
                        int(it.x*w),
                        int(it.y*h),
                        int(it.sx*w),
                        int(it.sy*h),
                        depth+1
                    ])
                    print(queue)
            if prediction == SubdivisionAction.VERTICAL:
                bbx = get_bounding_boxes(
                    prepared,
                    depth=depth,
                    horizontal=False,
                    sx=sx,
                    sy=sy,
                    x=x,
                    y=y,
                    max_depth=depth+1
                )
                for it in bbx:
                    print(it)
                    queue.append([
                        int(it.x*w),
                        int(it.y*h),
                        int(it.sx*w),
                        int(it.sy*h),
                        depth+1
                    ])
                    print(queue)
            if prediction == SubdivisionAction.END_TEXT:
                ret[x:sx+x, y:sy+y, 0] = 50 + depth*10
            if prediction == SubdivisionAction.END_FIGURE:
                ret[x:sx+x, y:sy+y, 1] = 50 + depth*10
            if prediction == SubdivisionAction.END_THRASH:
                ret[x:sx+x, y:sy+y, 2] = 50 + depth*10
            if prediction not in [SubdivisionAction.VERTICAL, SubdivisionAction.HORIZONTAL]:
                visited[x, y, sx, sy] = True
            print(prediction)
            print(cls)
        print("fimloop")
        return ret, prepared

    def handle_tick(self, gui, value):
        self.handle_image_change(gui)
        super().handle_tick(gui, value)
        gui.window['status'].update(
            value=f'tx: {self.tx:.4f} ty: {self.ty:.4f} d: {self.max_depth}'
        )
        # print(len(self.known_elements))

    @property
    def buttons(self):
        return [
            *super().buttons,
            sg.Text(key='status'),
            sg.Text("vermelho=texto,verde=figura,azul=lixo")
        ]


parser = ArgumentParser()
parser.add_argument('-i', type=Path, help="PDF file to process", required=True)
parser.add_argument('-z', type=float, help="zoom scale", default=1)
parser.add_argument('-n', type=int, help="start at page", default=1)
parser.add_argument('-m', type=Path, help="model file (h5)", required=True)

args = parser.parse_args()

scale = args.z
page = args.n - 1

images = convert_from_path(args.i)
qt_images = len(images)

if page < 0 or page >= qt_images:
    raise Exception(f"Invalid page: {page + 1}")

handler = CustomGUIHandler(page=page, scale=scale, model=args.m)
gui = GUI(images, handler)
gui.run()
